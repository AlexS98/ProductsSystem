// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductSystem.Management.Database;

namespace ProductSystem.Management.Migrations
{
    [DbContext(typeof(ManageDbContext))]
    [Migration("20201215010837_ExtendRelations")]
    partial class ExtendRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProductSystem.Management.Models.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("ProductSystem.Management.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c126df2-63c4-4005-8190-f2b9b5e762b0"),
                            Code = "stn",
                            Name = "Stone"
                        },
                        new
                        {
                            Id = new Guid("3ae4c2c5-c821-4baa-a3ad-673aef94a946"),
                            Code = "wd",
                            Name = "Wood"
                        },
                        new
                        {
                            Id = new Guid("dd01763e-6ebb-49b9-bd23-3fb5dd34a9ae"),
                            Code = "stl",
                            Name = "Steel"
                        },
                        new
                        {
                            Id = new Guid("fa031419-66b3-41f9-9eaa-8cceda79e890"),
                            Code = "gd",
                            Name = "Gold"
                        },
                        new
                        {
                            Id = new Guid("a609390c-b3fe-4989-b78c-e8a38562b7ec"),
                            Code = "cl",
                            Name = "Coal"
                        });
                });

            modelBuilder.Entity("ProductSystem.Management.Models.SellPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SellPoints");
                });

            modelBuilder.Entity("ProductSystem.Management.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ToSellPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ToSellPointId");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("ProductSystem.Management.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Capacity")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("FunctioningCapacity")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e498cdc-803b-4b74-9e9a-00ec6c2e3f24"),
                            Address = "Kyiv, Ukraine",
                            Capacity = 250f,
                            FunctioningCapacity = 0f,
                            Name = "Warhouse 1"
                        },
                        new
                        {
                            Id = new Guid("8c8d3d9e-b532-4daa-b95d-9bf8fdb56092"),
                            Address = "Lviv, Ukraine",
                            Capacity = 180f,
                            FunctioningCapacity = 0f,
                            Name = "Warhouse 2"
                        },
                        new
                        {
                            Id = new Guid("6cc495ea-e737-4f69-b630-277c56f126fa"),
                            Address = "Kharkiv, Ukraine",
                            Capacity = 210f,
                            FunctioningCapacity = 0f,
                            Name = "Warhouse 3"
                        });
                });

            modelBuilder.Entity("ProductSystem.Management.Models.WarehouseProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c76a8498-99a2-44b9-a5ac-99e4ea06d521"),
                            ProductId = new Guid("9c126df2-63c4-4005-8190-f2b9b5e762b0"),
                            WarehouseId = new Guid("1e498cdc-803b-4b74-9e9a-00ec6c2e3f24")
                        },
                        new
                        {
                            Id = new Guid("c0d88561-9ce9-4fc2-98ef-4fd1380e8a55"),
                            ProductId = new Guid("3ae4c2c5-c821-4baa-a3ad-673aef94a946"),
                            WarehouseId = new Guid("1e498cdc-803b-4b74-9e9a-00ec6c2e3f24")
                        },
                        new
                        {
                            Id = new Guid("5e7a823b-d71f-476a-9537-2f4d4fb5b694"),
                            ProductId = new Guid("dd01763e-6ebb-49b9-bd23-3fb5dd34a9ae"),
                            WarehouseId = new Guid("1e498cdc-803b-4b74-9e9a-00ec6c2e3f24")
                        },
                        new
                        {
                            Id = new Guid("3028646d-66c7-4aed-bd4d-fe5166a4dcca"),
                            ProductId = new Guid("fa031419-66b3-41f9-9eaa-8cceda79e890"),
                            WarehouseId = new Guid("1e498cdc-803b-4b74-9e9a-00ec6c2e3f24")
                        },
                        new
                        {
                            Id = new Guid("9551daac-a5f6-4df0-b0c0-5066ba94334a"),
                            ProductId = new Guid("3ae4c2c5-c821-4baa-a3ad-673aef94a946"),
                            WarehouseId = new Guid("8c8d3d9e-b532-4daa-b95d-9bf8fdb56092")
                        },
                        new
                        {
                            Id = new Guid("41f7eb47-5fc5-49fb-a2fa-c1a31d4e849e"),
                            ProductId = new Guid("dd01763e-6ebb-49b9-bd23-3fb5dd34a9ae"),
                            WarehouseId = new Guid("8c8d3d9e-b532-4daa-b95d-9bf8fdb56092")
                        },
                        new
                        {
                            Id = new Guid("2b549877-704f-4ec0-9485-7a58f4dd233c"),
                            ProductId = new Guid("a609390c-b3fe-4989-b78c-e8a38562b7ec"),
                            WarehouseId = new Guid("8c8d3d9e-b532-4daa-b95d-9bf8fdb56092")
                        },
                        new
                        {
                            Id = new Guid("9bf45fee-f0e3-4e40-a732-75a9ffa5a770"),
                            ProductId = new Guid("fa031419-66b3-41f9-9eaa-8cceda79e890"),
                            WarehouseId = new Guid("6cc495ea-e737-4f69-b630-277c56f126fa")
                        },
                        new
                        {
                            Id = new Guid("e0f3d7ac-f65c-4159-abe0-2c732b432b5a"),
                            ProductId = new Guid("9c126df2-63c4-4005-8190-f2b9b5e762b0"),
                            WarehouseId = new Guid("6cc495ea-e737-4f69-b630-277c56f126fa")
                        });
                });

            modelBuilder.Entity("ProductSystem.Management.Models.Batch", b =>
                {
                    b.HasOne("ProductSystem.Management.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ProductSystem.Management.Models.Warehouse", "Warehouse")
                        .WithMany("Batches")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("ProductSystem.Management.Models.Transfer", b =>
                {
                    b.HasOne("ProductSystem.Management.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId");

                    b.HasOne("ProductSystem.Management.Models.SellPoint", "ToSellPoint")
                        .WithMany()
                        .HasForeignKey("ToSellPointId");

                    b.HasOne("ProductSystem.Management.Models.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId");
                });

            modelBuilder.Entity("ProductSystem.Management.Models.WarehouseProduct", b =>
                {
                    b.HasOne("ProductSystem.Management.Models.Product", "Product")
                        .WithMany("AvailableProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductSystem.Management.Models.Warehouse", "Warehouse")
                        .WithMany("AvailableProducts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
